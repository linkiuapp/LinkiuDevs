/**
 * =============================================================================
 * SCRIPT DE VERIFICACI√ìN R√ÅPIDA - SISTEMA DE VERIFICACI√ìN DE TIENDAS
 * =============================================================================
 * 
 * INSTRUCCIONES:
 * 1. Ir a: http://localhost:8000/superlinkiu/stores
 * 2. Abrir DevTools (F12)
 * 3. Ir a la pesta√±a Console
 * 4. Copiar y pegar TODO este c√≥digo
 * 5. Presionar Enter
 * 
 * El script verificar√° autom√°ticamente todos los componentes y te dir√°
 * exactamente qu√© est√° funcionando y qu√© necesita arreglo.
 * =============================================================================
 */

console.clear();
console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO DEL SISTEMA DE VERIFICACI√ìN...\n');

// =============================================================================
// VERIFICACI√ìN DE COMPONENTES B√ÅSICOS
// =============================================================================

let diagnosis = {
    alpine: false,
    storeUtils: false,
    csrfToken: false,
    toggles: 0,
    storeManagement: false,
    errors: []
};

// 1. Verificar Alpine.js
try {
    if (typeof Alpine !== 'undefined') {
        diagnosis.alpine = true;
        console.log('‚úÖ Alpine.js est√° disponible');
    } else {
        diagnosis.errors.push('‚ùå Alpine.js NO est√° disponible');
        console.error('‚ùå Alpine.js NO est√° disponible');
    }
} catch (e) {
    diagnosis.errors.push('‚ùå Error verificando Alpine.js: ' + e.message);
    console.error('‚ùå Error verificando Alpine.js:', e);
}

// 2. Verificar StoreUtils
try {
    if (typeof StoreUtils !== 'undefined') {
        diagnosis.storeUtils = true;
        console.log('‚úÖ StoreUtils est√° disponible');
        
        // Verificar m√©todos principales
        const methods = ['getCsrfToken', 'apiCall', 'debug'];
        methods.forEach(method => {
            if (typeof StoreUtils[method] === 'function') {
                console.log(`  ‚úÖ StoreUtils.${method}() disponible`);
            } else {
                diagnosis.errors.push(`‚ùå StoreUtils.${method}() NO est√° disponible`);
                console.error(`‚ùå StoreUtils.${method}() NO est√° disponible`);
            }
        });
    } else {
        diagnosis.errors.push('‚ùå StoreUtils NO est√° disponible');
        console.error('‚ùå StoreUtils NO est√° disponible');
    }
} catch (e) {
    diagnosis.errors.push('‚ùå Error verificando StoreUtils: ' + e.message);
    console.error('‚ùå Error verificando StoreUtils:', e);
}

// 3. Verificar CSRF Token
try {
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
    if (csrfToken) {
        diagnosis.csrfToken = true;
        console.log('‚úÖ CSRF Token est√° presente:', csrfToken.substring(0, 20) + '...');
    } else {
        diagnosis.errors.push('‚ùå CSRF Token NO encontrado');
        console.error('‚ùå CSRF Token NO encontrado');
    }
} catch (e) {
    diagnosis.errors.push('‚ùå Error verificando CSRF Token: ' + e.message);
    console.error('‚ùå Error verificando CSRF Token:', e);
}

// 4. Verificar Toggles de Verificaci√≥n
try {
    const toggles = document.querySelectorAll('.verification-toggle');
    diagnosis.toggles = toggles.length;
    
    if (toggles.length > 0) {
        console.log(`‚úÖ ${toggles.length} toggle(s) de verificaci√≥n encontrados`);
        
        toggles.forEach((toggle, index) => {
            console.log(`  Toggle ${index + 1}:`, {
                dataUrl: toggle.dataset.url,
                storeId: toggle.dataset.storeId,
                checked: toggle.checked,
                hasClass: toggle.classList.contains('verification-toggle')
            });
        });
    } else {
        diagnosis.errors.push('‚ö†Ô∏è No se encontraron toggles de verificaci√≥n en esta p√°gina');
        console.warn('‚ö†Ô∏è No se encontraron toggles de verificaci√≥n');
        console.log('   Esto es normal si no hay tiendas en la lista o est√°s en otra p√°gina');
    }
} catch (e) {
    diagnosis.errors.push('‚ùå Error verificando toggles: ' + e.message);
    console.error('‚ùå Error verificando toggles:', e);
}

// 5. Verificar que storeManagement est√© registrado en Alpine
try {
    // Intentar acceder al componente storeManagement
    const storeElement = document.querySelector('[x-data="storeManagement"]');
    if (storeElement) {
        diagnosis.storeManagement = true;
        console.log('‚úÖ Elemento con x-data="storeManagement" encontrado');
    } else {
        diagnosis.errors.push('‚ö†Ô∏è No se encontr√≥ elemento con x-data="storeManagement"');
        console.warn('‚ö†Ô∏è No se encontr√≥ elemento con x-data="storeManagement"');
        console.log('   Esto es normal si no est√°s en la p√°gina de stores');
    }
} catch (e) {
    diagnosis.errors.push('‚ùå Error verificando storeManagement: ' + e.message);
    console.error('‚ùå Error verificando storeManagement:', e);
}

// =============================================================================
// RESUMEN DEL DIAGN√ìSTICO
// =============================================================================

console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO:');
console.log('='.repeat(50));

if (diagnosis.alpine && diagnosis.storeUtils && diagnosis.csrfToken) {
    console.log('üéâ ¬°SISTEMA B√ÅSICO FUNCIONANDO CORRECTAMENTE!');
    console.log('‚úÖ Todos los componentes principales est√°n disponibles');
    
    if (diagnosis.toggles > 0) {
        console.log('‚úÖ Se encontraron toggles de verificaci√≥n');
        console.log('\nüéØ PR√ìXIMO PASO: Activar debugging detallado');
        console.log('   Ejecuta: localStorage.setItem("store_debug", "true"); location.reload();');
    } else {
        console.log('\nüí° INFORMACI√ìN: No hay toggles en esta p√°gina');
        console.log('   Ve a la p√°gina de stores para ver los toggles de verificaci√≥n');
    }
} else {
    console.log('üö® PROBLEMAS ENCONTRADOS:');
    diagnosis.errors.forEach(error => {
        console.log('   ' + error);
    });
}

// =============================================================================
// FUNCIONES DE TESTING ADICIONALES
// =============================================================================

console.log('\nüîß FUNCIONES DE TESTING DISPONIBLES:');
console.log('üìù Puedes ejecutar estas funciones para testing adicional:');

// Funci√≥n para test completo
window.testStoreSystem = function() {
    console.log('üß™ Ejecutando test completo del sistema...');
    
    // Test CSRF
    if (diagnosis.storeUtils) {
        try {
            const token = StoreUtils.getCsrfToken();
            console.log('‚úÖ CSRF Token obtenido exitosamente');
        } catch (e) {
            console.error('‚ùå Error obteniendo CSRF Token:', e);
        }
    }
    
    // Test de toggles
    if (diagnosis.toggles > 0) {
        const firstToggle = document.querySelector('.verification-toggle');
        if (firstToggle) {
            console.log('‚úÖ Primer toggle encontrado:', {
                url: firstToggle.dataset.url,
                storeId: firstToggle.dataset.storeId,
                currentState: firstToggle.checked
            });
        }
    }
    
    console.log('üéØ Test completo finalizado');
};

// Funci√≥n para test de API
window.testVerificationAPI = async function(storeId) {
    if (!storeId) {
        console.error('‚ùå Debes proporcionar un storeId: testVerificationAPI(1)');
        return;
    }
    
    console.log(`üß™ Testing API de verificaci√≥n para store ${storeId}...`);
    
    try {
        const csrfToken = StoreUtils.getCsrfToken();
        const url = `/superlinkiu/stores/${storeId}/toggle-verification`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': csrfToken,
                'Accept': 'application/json'
            }
        });
        
        const data = await response.json();
        console.log('‚úÖ API Response:', data);
        return data;
    } catch (error) {
        console.error('‚ùå API Test failed:', error);
        return false;
    }
};

console.log('   ‚Ä¢ testStoreSystem() - Test completo del sistema');
console.log('   ‚Ä¢ testVerificationAPI(storeId) - Test de API espec√≠fico');

console.log('\n' + '='.repeat(50));
console.log('‚ú® DIAGN√ìSTICO COMPLETADO');

// Retornar diagnosis para programmatic access
window.storeDiagnosis = diagnosis; 